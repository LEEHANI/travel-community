<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.board.repository.CommentRepository">

	<resultMap type="commentDto" id="commentDto">
		<id column="id" property="id" />
		<result column="content" property="content" />
		<result column="good" property="good" />
		<result column="writer" property="writer" />
		<result column="is_good" property="isGood" />
		<result column="register_date" property="registerDate" />
		<result column="update_date" property="updateDate" />
		<collection property="replies" ofType="replyDto">
			<id column="reply_id" property="id" />
			<result column="reply_content" property="content" />
			<result column="reply_writer" property="writer" />
			<result column="reply_good" property="good" />
			<result column="reply_is_good" property="isGood" />
			<result column="reply_register_date" property="registerDate" />
		</collection>
	</resultMap>
	
	<select id="findByMemberId" resultType="comment">
		SELECT *
		FROM comment
		WHERE member_id = #{memberId}
		LIMIT #{offset}, #{numOfRecords}
	</select>
	
	<select id="getCommentCntByMemberId" parameterType="Long" resultType="Integer">
		SELECT count(*)
		FROM comment
		WHERE member_id = #{memberId};
	</select>
	
	<insert id="insertComment">
		INSERT
		INTO comment(article_id, member_id, parent_comment_id, content, register_date)
		VALUES(#{articleId}, #{memberId}, #{parentCommentId}, #{content}, NOW())
	</insert>
	
	<select id="selectCommentById" resultType="comment">
		SELECT * 
		FROM comment 
		WHERE id = #{id}
	</select>
	
	<select id="selectCommentByIdAndMemberId" resultMap="commentDto">
		SELECT  
			c1.id id,
			c1.content content, 
			c1.register_date register_date, 
			c1.update_date update_date, 
			c1.good good, 
			CASE 
				WHEN c1.parent_comment_id IS NULL THEN c2.content 
				ELSE c2.content 
			END AS reply_content, 
			m2.email reply_writer, 
			c2.register_date reply_register_date, 
			c2.good reply_good, 
			c2.id reply_id
		FROM comment c1 
		LEFT JOIN comment c2
		ON c1.id = c2.parent_comment_id
		LEFT JOIN member m2 
		ON c2.member_id = m2.id 
		WHERE c1.id = #{id}
		AND c1.member_id = #{memberId}
	</select>
	
	<select id="selectCommentByArticleId" resultMap="commentDto">
		SELECT 
			c1.id id,
			c1.content content, 
			c1.register_date register_date, 
			c1.update_date update_date, 
			c1.good good, 
			m1.email writer, 
			IF(cl1.id > 0, 1, 0) AS `is_good`, 
			CASE 
				WHEN c1.parent_comment_id IS NULL THEN c2.content 
				ELSE c2.content 
			END AS reply_content, 
			m2.email reply_writer, 
			c2.register_date reply_register_date, 
			c2.good reply_good, 
			c2.id reply_id, 
			IF(cl2.id > 0, 1, NULL) AS `reply_is_good`
		FROM comment c1  
		LEFT JOIN comment c2 
		ON c1.id = c2.parent_comment_id 
		INNER JOIN member m1 
		ON c1.member_id = m1.id 
		LEFT JOIN member m2 
		ON c2.member_id = m2.id 
		LEFT JOIN comment_like cl1 
		ON m1.id = cl1.member_id 
		AND m1.id = #{memberId} 
		AND c1.id = cl1.comment_id 
		LEFT JOIN comment_like cl2 
		ON m2.id = cl2.member_id 
		AND m2.id = #{memberId} 
		AND c2.id = cl2.comment_id 
		WHERE c1.article_id = #{articleId} 
		AND c1.parent_comment_id IS NULL 
		ORDER BY c1.id DESC 
	</select>
	
	<delete id="deleteCommentById">
		DELETE 
		FROM comment 
		WHERE id = #{id}
	</delete>
	
	<update id="updateCommentContentById">
		UPDATE comment 
		SET update_date = NOW()
		WHERE id = #{id}
	</update>

</mapper>